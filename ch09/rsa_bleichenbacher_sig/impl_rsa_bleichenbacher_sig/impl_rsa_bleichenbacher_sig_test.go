package impl_rsa_bleichenbacher_sig

import (
	"crypto"
	"crypto/rsa"
	"crypto/sha256"
	"testing"
)

func TestGenerateRSAKeyWithPublicExponent3(t *testing.T) {
	keypair, err := GenerateRSAKeypairWithPublicExponent3()
	if err != nil {
		t.Fatalf("error generating private key: %s", err)
	}

	message := []byte("Hello World!")
	hash := sha256.Sum256(message)

	signature, err := rsa.SignPKCS1v15(nil, keypair.privKey, crypto.SHA256, hash[:])
	if err != nil {
		t.Fatalf("error generating signature: %s", err)
	}

	err = rsa.VerifyPKCS1v15(keypair.PublicKey, crypto.SHA256, hash[:], signature)
	if err != nil {
		t.Fatalf("signature verification failed: %s", err)
	}

	t.Log("signature generated & verified successfully using fixed exponent key")

	err = VerifyPKCS1v15Insecure(keypair.PublicKey, crypto.SHA256, hash[:], signature)
	if err != nil {
		t.Fatalf("signature verification failed: %s", err)
	}
}
