package exploit_short_priv_exp

import (
	"math/big"
	"testing"

	"github.com/krkhan/crypto-impl-exploit/ch07/short_priv_exp/impl_short_priv_exp"
)

func TestContinuedFraction(t *testing.T) {
	result := ContinuedFraction(Fraction{
		Numerator:   big.NewInt(113781),
		Denominator: big.NewInt(88474),
	})

	expected := []*big.Int{
		big.NewInt(1),
		big.NewInt(3),
		big.NewInt(2),
		big.NewInt(62),
		big.NewInt(2),
		big.NewInt(4),
		big.NewInt(1),
		big.NewInt(3),
		big.NewInt(1),
		big.NewInt(3),
	}

	if len(expected) != len(result) {
		t.Fatalf("wrong amount of quotients, expected: %d, got: %d", len(expected), len(result))
	}

	for i := 0; i < len(expected); i++ {
		if result[i].Cmp(expected[i]) != 0 {
			t.Fatalf("wrong quotient, expected: %X, got: %X", result[i], expected[i])
		}
	}

	result = ContinuedFraction(Fraction{
		Numerator:   big.NewInt(99877),
		Denominator: big.NewInt(654876),
	})

	expected = []*big.Int{
		big.NewInt(0),
		big.NewInt(6),
		big.NewInt(1),
		big.NewInt(1),
		big.NewInt(3),
		big.NewInt(1),
		big.NewInt(8),
		big.NewInt(1),
		big.NewInt(18),
		big.NewInt(2),
		big.NewInt(1),
		big.NewInt(19),
	}

	if len(expected) != len(result) {
		t.Fatalf("wrong amount of quotients, expected: %d, got: %d", len(expected), len(result))
	}

	for i := 0; i < len(expected); i++ {
		if result[i].Cmp(expected[i]) != 0 {
			t.Fatalf("wrong quotient, expected: %X, got: %X", result[i], expected[i])
		}
	}

	result = ContinuedFraction(Fraction{
		Numerator:   big.NewInt(44237),
		Denominator: big.NewInt(111361),
	})

	expected = []*big.Int{
		big.NewInt(0),
		big.NewInt(2),
		big.NewInt(1),
		big.NewInt(1),
		big.NewInt(13),
		big.NewInt(1),
		big.NewInt(8),
		big.NewInt(6),
		big.NewInt(1),
		big.NewInt(2),
		big.NewInt(1),
		big.NewInt(1),
		big.NewInt(3),
	}

	if len(expected) != len(result) {
		t.Fatalf("wrong amount of quotients, expected: %d, got: %d", len(expected), len(result))
	}

	for i := 0; i < len(expected); i++ {
		if result[i].Cmp(expected[i]) != 0 {
			t.Fatalf("wrong quotient, expected: %X, got: %X", result[i], expected[i])
		}
	}

	t.Logf("continued fraction expansion tested successfully")
}

func TestConvergents(t *testing.T) {
	result := Convergents(ContinuedFraction(Fraction{
		Numerator:   big.NewInt(113781),
		Denominator: big.NewInt(88474),
	}))

	expected := []Fraction{
		{
			Numerator:   big.NewInt(1),
			Denominator: big.NewInt(1),
		},
		{
			Numerator:   big.NewInt(4),
			Denominator: big.NewInt(3),
		},
		{
			Numerator:   big.NewInt(9),
			Denominator: big.NewInt(7),
		},
		{
			Numerator:   big.NewInt(562),
			Denominator: big.NewInt(437),
		},
		{
			Numerator:   big.NewInt(1133),
			Denominator: big.NewInt(881),
		},
		{
			Numerator:   big.NewInt(5094),
			Denominator: big.NewInt(3961),
		},
		{
			Numerator:   big.NewInt(6227),
			Denominator: big.NewInt(4842),
		},
		{
			Numerator:   big.NewInt(23775),
			Denominator: big.NewInt(18487),
		},
		{
			Numerator:   big.NewInt(30002),
			Denominator: big.NewInt(23329),
		},
		{
			Numerator:   big.NewInt(113781),
			Denominator: big.NewInt(88474),
		},
	}

	if len(expected) != len(result) {
		t.Fatalf("wrong amount of convergents, expected: %d, got: %d", len(expected), len(result))
	}

	for i := 0; i < len(expected); i++ {
		if result[i].Numerator.Cmp(expected[i].Numerator) != 0 {
			t.Fatalf("wrong numerator for convergent %d, expected: %X, got: %X", i, result[i], expected[i])
		}

		if result[i].Denominator.Cmp(expected[i].Denominator) != 0 {
			t.Fatalf("wrong denominator for convergent %d, expected: %X, got: %X", i, result[i], expected[i])
		}
	}

	result = Convergents(ContinuedFraction(Fraction{
		Numerator:   big.NewInt(99877),
		Denominator: big.NewInt(654876),
	}))

	expected = []Fraction{
		{
			Numerator:   big.NewInt(0),
			Denominator: big.NewInt(1),
		},
		{
			Numerator:   big.NewInt(1),
			Denominator: big.NewInt(6),
		},
		{
			Numerator:   big.NewInt(1),
			Denominator: big.NewInt(7),
		},
		{
			Numerator:   big.NewInt(2),
			Denominator: big.NewInt(13),
		},
		{
			Numerator:   big.NewInt(7),
			Denominator: big.NewInt(46),
		},
		{
			Numerator:   big.NewInt(9),
			Denominator: big.NewInt(59),
		},
		{
			Numerator:   big.NewInt(79),
			Denominator: big.NewInt(518),
		},
		{
			Numerator:   big.NewInt(88),
			Denominator: big.NewInt(577),
		},
		{
			Numerator:   big.NewInt(1663),
			Denominator: big.NewInt(10904),
		},
		{
			Numerator:   big.NewInt(3414),
			Denominator: big.NewInt(22385),
		},
		{
			Numerator:   big.NewInt(5077),
			Denominator: big.NewInt(33289),
		},
		{
			Numerator:   big.NewInt(99877),
			Denominator: big.NewInt(654876),
		},
	}

	if len(expected) != len(result) {
		t.Fatalf("wrong amount of convergents, expected: %d, got: %d", len(expected), len(result))
	}

	for i := 0; i < len(expected); i++ {
		if result[i].Numerator.Cmp(expected[i].Numerator) != 0 {
			t.Fatalf("wrong numerator for convergent %d, expected: %X, got: %X", i, result[i], expected[i])
		}

		if result[i].Denominator.Cmp(expected[i].Denominator) != 0 {
			t.Fatalf("wrong denominator for convergent %d, expected: %X, got: %X", i, result[i], expected[i])
		}
	}

	result = Convergents(ContinuedFraction(Fraction{
		Numerator:   big.NewInt(44237),
		Denominator: big.NewInt(111361),
	}))

	expected = []Fraction{
		{
			Numerator:   big.NewInt(0),
			Denominator: big.NewInt(1),
		},
		{
			Numerator:   big.NewInt(1),
			Denominator: big.NewInt(2),
		},
		{
			Numerator:   big.NewInt(1),
			Denominator: big.NewInt(3),
		},
		{
			Numerator:   big.NewInt(2),
			Denominator: big.NewInt(5),
		},
		{
			Numerator:   big.NewInt(27),
			Denominator: big.NewInt(68),
		},
		{
			Numerator:   big.NewInt(29),
			Denominator: big.NewInt(73),
		},
		{
			Numerator:   big.NewInt(259),
			Denominator: big.NewInt(652),
		},
		{
			Numerator:   big.NewInt(1583),
			Denominator: big.NewInt(3985),
		},
		{
			Numerator:   big.NewInt(1842),
			Denominator: big.NewInt(4637),
		},
		{
			Numerator:   big.NewInt(5267),
			Denominator: big.NewInt(13259),
		},
		{
			Numerator:   big.NewInt(7109),
			Denominator: big.NewInt(17896),
		},
		{
			Numerator:   big.NewInt(12376),
			Denominator: big.NewInt(31155),
		},
		{
			Numerator:   big.NewInt(44237),
			Denominator: big.NewInt(111361),
		},
	}

	if len(expected) != len(result) {
		t.Fatalf("wrong amount of convergents, expected: %d, got: %d", len(expected), len(result))
	}

	for i := 0; i < len(expected); i++ {
		if result[i].Numerator.Cmp(expected[i].Numerator) != 0 {
			t.Fatalf("wrong numerator for convergent %d, expected: %X, got: %X", i, result[i], expected[i])
		}

		if result[i].Denominator.Cmp(expected[i].Denominator) != 0 {
			t.Fatalf("wrong denominator for convergent %d, expected: %X, got: %X", i, result[i], expected[i])
		}
	}

	t.Logf("convergents tested successfully")
}

func TestWienersAttack(t *testing.T) {
	pubKey, ciphertext, err := impl_short_priv_exp.GenerateRSAPublicKeyAndCiphertext()

	if err != nil {
		t.Fatalf("error generating pubkey: %s", err)
	}

	recoveredPrivKey, err := RecoverPrivateKeyUsingWienersAttack(pubKey)
	if err != nil {
		t.Fatalf("error: %s", err)
	}

	decrypted := recoveredPrivKey.Decrypt(ciphertext)

	t.Logf("decrypted: %s", decrypted.Bytes())
}
