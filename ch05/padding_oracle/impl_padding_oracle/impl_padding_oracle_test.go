package impl_padding_oracle

import (
	"bytes"
	"encoding/hex"
	"testing"
)

func TestPKCS7PaddingAndRemoval(t *testing.T) {
	blockSize := 16
	t.Logf("blockSize: %d", blockSize)

	originalData := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b}
	padded, err := PadWithPKCS7(originalData, blockSize)
	if err != nil {
		t.Fatalf("pkcs7 padding failed: %s", err)
	}

	_, err = RemovePKCS7Padding(padded, blockSize-2)
	if err == nil {
		t.Fatal("removing padding with incorrect blocksize should have failed")
	}
	t.Logf("removing padding with wrong block length failed with error as expected")

	unpadded, err := RemovePKCS7Padding(padded, blockSize)
	if err != nil {
		t.Fatalf("removing pkcs7 padding failed: %s", err)
	}

	if !bytes.Equal(originalData, unpadded) {
		t.Fatal("unpadded data is not the same as original data")
	}

	t.Log("unpadded data verified successfully against original data")
}

func TestPKCS7PaddingPartialBlock(t *testing.T) {
	blockSize := 16
	t.Logf("blockSize: %d", blockSize)

	originalData := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b}
	padded, err := PadWithPKCS7(originalData, blockSize)
	if err != nil {
		t.Fatalf("pkcs7 padding failed: %s", err)
	}

	t.Logf("originalData: %s", hex.EncodeToString(originalData))
	t.Logf("padded: %s", hex.EncodeToString(padded))

	for i := 1; i <= blockSize-len(originalData); i++ {
		if int(padded[len(padded)-i]) != blockSize-len(originalData) {
			t.Fatalf("invalid padding byte %d: 0x%02X", i, padded[i])
		}
	}
}

func TestPKCS7PaddingFullBlock(t *testing.T) {
	blockSize := 16
	t.Logf("blockSize: %d", blockSize)

	originalData := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}
	padded, err := PadWithPKCS7(originalData, blockSize)
	if err != nil {
		t.Fatalf("pkcs7 padding failed: %s", err)
	}

	t.Logf("originalData: %s", hex.EncodeToString(originalData))
	t.Logf("padded: %s", hex.EncodeToString(padded))

	for i := 1; i <= blockSize; i++ {
		if padded[len(padded)-i] != byte(blockSize) {
			t.Fatalf("invalid padding byte -%d: 0x%02X", i, padded[len(padded)-i])
		}
	}
}

func TestPaddingOracleServer(t *testing.T) {
	server, err := NewPaddingOracleServer()
	if err != nil {
		t.Fatalf("error creating padding oracle server: %s", err)
	}

	ciphertext, err := server.GenerateEncryptedTimestamp()
	if err != nil {
		t.Fatalf("error generating encrypted message: %s", err)
	}

	t.Logf("ciphertext: %s\n", hex.EncodeToString(ciphertext))

	difference, err := server.CalculateTimeDifference(ciphertext)
	if err != nil {
		t.Fatalf("error processing encrypted timestamp: %s", err)
	}

	t.Logf("time difference: %s\n", difference)
}
