package impl_padding_oracle

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"math/rand"
	"time"
)

func PadWithPKCS7(data []byte, blockSize int) ([]byte, error) {
	if blockSize <= 0 {
		return nil, fmt.Errorf("invalid block size")
	}
	if data == nil {
		return nil, fmt.Errorf("input data is nil")
	}

	padding := blockSize - len(data)%blockSize
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(data, padtext...), nil
}

func RemovePKCS7Padding(data []byte, blockSize int) ([]byte, error) {
	if blockSize <= 0 {
		return nil, fmt.Errorf("invalid block size")
	}
	if data == nil {
		return nil, fmt.Errorf("input data is nil")
	}
	if len(data)%blockSize != 0 || len(data) == 0 {
		return nil, fmt.Errorf("invalid data length")
	}

	padding := data[len(data)-1]
	i := len(data) - int(padding)
	if i < 0 {
		return nil, fmt.Errorf("invalid padding")
	}

	return data[:i], nil
}

func IsPKCS7PaddingValid(data []byte) bool {
	padding := int(data[len(data)-1])

	if padding <= 0 || padding > len(data) {
		return false
	}

	for i := 1; i <= padding; i++ {
		if data[len(data)-i] != byte(padding) {
			return false
		}
	}

	return true
}

type InvalidPaddingError struct {
	Message string
}

func (e *InvalidPaddingError) Error() string {
	return e.Message
}

type InvalidTimeError struct {
	Message string
}

func (e *InvalidTimeError) Error() string {
	return e.Message
}

type PaddingOracleServer struct {
	key []byte
}

func NewPaddingOracleServer() (*PaddingOracleServer, error) {
	key := make([]byte, aes.BlockSize)
	if _, err := rand.Read(key); err != nil {
		return nil, fmt.Errorf("could not generate random key")
	}
	oracle := &PaddingOracleServer{
		key,
	}
	return oracle, nil
}

func (server *PaddingOracleServer) GenerateEncryptedTimestamp() ([]byte, error) {
	plaintext := []byte(time.Now().Format(time.UnixDate))

	blockCipher, err := aes.NewCipher(server.key)
	if err != nil {
		return nil, err
	}

	iv := make([]byte, aes.BlockSize)
	if _, err := rand.Read(iv); err != nil {
		return nil, fmt.Errorf("could not generate random iv")
	}

	paddedPlaintext, err := PadWithPKCS7(plaintext, aes.BlockSize)
	if err != nil {
		return nil, err
	}

	cbcMode := cipher.NewCBCEncrypter(blockCipher, iv)
	ciphertext := make([]byte, len(paddedPlaintext))
	cbcMode.CryptBlocks(ciphertext, paddedPlaintext)
	ciphertext = append(iv, ciphertext...)

	return ciphertext, nil
}

func (server *PaddingOracleServer) decryptMessageAndParseTimestamp(ciphertext []byte) (*time.Time, error) {
	blockCipher, err := aes.NewCipher(server.key)
	if err != nil {
		return nil, err
	}

	iv := ciphertext[:aes.BlockSize]
	ciphertext = ciphertext[aes.BlockSize:]

	cbcMode := cipher.NewCBCDecrypter(blockCipher, iv)
	paddedPlaintext := make([]byte, len(ciphertext))
	cbcMode.CryptBlocks(paddedPlaintext, ciphertext)

	if !IsPKCS7PaddingValid(paddedPlaintext) {
		return nil, &InvalidPaddingError{
			Message: "invalid padding",
		}
	}

	plaintext, err := RemovePKCS7Padding(paddedPlaintext, aes.BlockSize)
	if err != nil {
		return nil, err
	}

	timestamp, err := time.Parse(time.UnixDate, string(plaintext))
	if err != nil {
		return nil, &InvalidTimeError{
			Message: fmt.Sprintf("time format validation failed: %s", err),
		}
	}

	return &timestamp, nil
}

func (server *PaddingOracleServer) CalculateTimeDifference(ciphertext []byte) (*time.Duration, error) {
	timestamp, err := server.decryptMessageAndParseTimestamp(ciphertext)
	if err != nil {
		return nil, err
	}

	delta := time.Now().Sub(*timestamp)
	return &delta, nil
}
