package impl_rainbow_table

import (
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"math/rand"
	"time"
)

const PasswordLength = 6
const PasswordCharset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

type UserDatabase struct {
	Hashes map[string]string
}

func NewUserDatabase() *UserDatabase {
	return &UserDatabase{
		Hashes: make(map[string]string),
	}
}

func (db *UserDatabase) RegisterUser(username string, password string) error {
	if _, ok := db.Hashes[username]; ok {
		return errors.New("username already registered")
	}

	passwordHash := sha256.Sum256([]byte(password))
	db.Hashes[username] = hex.EncodeToString(passwordHash[:])

	return nil
}

func (db *UserDatabase) AuthenticateUser(username string, password string) bool {
	passwordHash := sha256.Sum256([]byte(password))

	expectedHashHex, ok := db.Hashes[username]
	if !ok {
		return false
	}
	passwordHashHex := hex.EncodeToString(passwordHash[:])
	if expectedHashHex == passwordHashHex {
		return true
	}

	return false
}

func GenerateRandomPassword(length int) string {
	var seededRand *rand.Rand = rand.New(rand.NewSource(time.Now().UnixNano()))
	b := make([]byte, length)
	for i := range b {
		b[i] = PasswordCharset[seededRand.Intn(len(PasswordCharset))]
	}
	return string(b)
}

func (db *UserDatabase) RegisterUserWithRandomPassword(username string) error {
	randPw := GenerateRandomPassword(PasswordLength)
	return db.RegisterUser(username, randPw)
}
