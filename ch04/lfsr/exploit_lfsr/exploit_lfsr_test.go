package exploit_lfsr

import (
	"github.com/krkhan/crypto-impl-exploit/ch04/lfsr/impl_lfsr"
	"testing"
)

func TestCloneLFSRWithKnownLengths(t *testing.T) {
	length := 8
	taps := []byte{0, 1, 1, 1, 0, 0, 0, 1}
	state := []byte{1, 1, 0, 1, 0, 1, 0, 1}
	originalRng := impl_lfsr.NewLFSR(length, taps, state)
	clonedRng, err := CloneLFSRWithLength(originalRng, length)
	if err != nil {
		t.Fatalf("cloning failed")
	}
	for i := 0; i < 100; i++ {
		cloned := clonedRng.GenerateBit()
		observed := originalRng.GenerateBit()
		if observed != cloned {
			t.Fatalf("observed: %d, cloned: %d", cloned, observed)
		}
	}

	length = 16
	taps = []byte{0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
	state = []byte{1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0}
	originalRng = impl_lfsr.NewLFSR(length, taps, state)
	clonedRng, err = CloneLFSRWithLength(originalRng, length)
	if err != nil {
		t.Fatalf("cloning failed")
	}
	for i := 0; i < 100; i++ {
		cloned := clonedRng.GenerateBit()
		observed := originalRng.GenerateBit()
		if observed != cloned {
			t.Fatalf("observed: %d, cloned: %d", cloned, observed)
		}
	}

	length = 32
	taps = make([]byte, 32)
	taps[1] = 0x01
	taps[5] = 0x01
	taps[6] = 0x01
	taps[31] = 0x01
	state = make([]byte, 32)
	state[3] = 0x01
	state[16] = 0x01
	state[18] = 0x01
	state[25] = 0x01
	originalRng = impl_lfsr.NewLFSR(length, taps, state)
	clonedRng, err = CloneLFSRWithLength(originalRng, length)
	if err != nil {
		t.Fatalf("cloning failed")
	}
	for i := 0; i < 100; i++ {
		cloned := clonedRng.GenerateBit()
		observed := originalRng.GenerateBit()
		if observed != cloned {
			t.Fatalf("observed: %d, cloned: %d", cloned, observed)
		}
	}
}

func TestCloneLFSRWithUnknownLength(t *testing.T) {
	length := 16
	taps := []byte{0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
	state := []byte{1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0}
	originalRng := impl_lfsr.NewLFSR(length, taps, state)
	clonedRng, err := CloneLFSR(originalRng)
	if err != nil {
		t.Fatalf("cloning failed")
	}
	for i := 0; i < 100; i++ {
		cloned := clonedRng.GenerateBit()
		observed := originalRng.GenerateBit()
		if observed != cloned {
			t.Fatalf("observed: %d, cloned: %d", cloned, observed)
		}
	}
}
