package impl_lfsr

import (
	"testing"
)

func TestLFSRGenerateBit(t *testing.T) {
	lfsr := NewLFSR()
	lfsr.Length = 6
	lfsr.State = []byte{1, 1, 0, 0, 1, 1}
	lfsr.Taps = []byte{1, 0, 1, 1, 0, 1}
	expected := []byte{0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1}

	for i := 0; i < len(expected); i++ {
		if r := lfsr.GenerateBit(); r != expected[i] {
			t.Fatalf("Generated: %d, Expected: %d.", r, expected[i])
		}
	}
}

func TestLFSREncrypt(t *testing.T) {
	lfsr := NewLFSR()
	lfsr.Length = 6
	lfsr.State = []byte{1, 1, 0, 0, 1, 1}
	lfsr.Taps = []byte{1, 0, 1, 1, 0, 1}

	plaintext := []byte{0x11, 0x22, 0x33}
	expected := []byte{0x04, 0x1D, 0x72}
	encrypted := lfsr.Encrypt(plaintext)

	for i := 0; i < len(expected); i++ {
		if encrypted[i] != expected[i] {
			t.Fatalf("Encrypted: 0x%02X, Expected: 0x%02X", encrypted[i], expected[i])
		}
	}
}
