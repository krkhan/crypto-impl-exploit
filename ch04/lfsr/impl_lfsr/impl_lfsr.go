package impl_lfsr

type LFSR struct {
	Length int
	Taps   []byte
	State  []byte
}

func NewLFSR() *LFSR {
	return &LFSR{
		Length: 0,
		Taps:   []byte{},
		State:  []byte{},
	}
}

func (lfsr *LFSR) GenerateBit() byte {
	result := byte(0x00)

	for i := 0; i < lfsr.Length; i++ {
		result = result ^ (lfsr.Taps[i] & lfsr.State[i])
	}

	for i := lfsr.Length - 1; i > 0; i-- {
		lfsr.State[i] = lfsr.State[i-1]
	}

	lfsr.State[0] = result

	return result
}

func (lfsr *LFSR) Encrypt(plaintext []byte) []byte {
	result := make([]byte, len(plaintext))

	for i := 0; i < len(plaintext); i++ {
		mask := byte(0x00)
		for j := 7; j >= 0; j-- {
			mask = mask ^ (lfsr.GenerateBit() << j)
		}
		result[i] = mask ^ plaintext[i]
	}

	return result
}
