package exploit_rc4

import (
	"fmt"

	"github.com/krkhan/crypto-impl-exploit/ch04/rc4/impl_rc4"
)

const WEPMessageVolume = 50000

func swap(x, y *byte) {
	tmp := *x
	*x = *y
	*y = tmp
}

func RecoverWEPPSK(wpg *impl_rc4.WEPPacketGenerator, partialKey []byte) byte {
	targetIndex := len(partialKey) + 3
	totalCount := 0
	freqDict := [256]int{}

	for i := 0; i < WEPMessageVolume; i++ {
		iv, ciphertext := wpg.GeneratePacketUsingWeakIV(targetIndex)
		keystreamByte := impl_rc4.SNAPHeader[0] ^ ciphertext[0]

		key := make([]byte, len(iv)+len(partialKey))
		copy(key[0:len(iv)], iv[:])
		copy(key[len(iv):], partialKey)

		state := [256]byte{}
		for i := 0; i < 256; i++ {
			state[i] = byte(i)
		}
		j := 0
		for i := 0; i < targetIndex; i++ {
			j = (j + int(state[i]) + int(key[i])) % 256
			swap(&state[i], &state[j])
		}
		candidateKey := (int(keystreamByte) - j - int(state[targetIndex])) % 256
		if candidateKey < 0 {
			candidateKey += 256
		}
		freqDict[candidateKey] += 1
		totalCount += 1
	}

	var highestFreqCandidate byte
	var highestFreqPercentage float64
	for i := 0; i < 256; i++ {
		freqPercentage := float64(freqDict[i]) / float64(totalCount) * 100
		if freqPercentage > highestFreqPercentage {
			highestFreqCandidate = byte(i)
			highestFreqPercentage = freqPercentage
		}
	}

	fmt.Printf("recovered byte: 0x%02x, frequency: %.2f%%\n", highestFreqCandidate, highestFreqPercentage)
	return highestFreqCandidate
}
