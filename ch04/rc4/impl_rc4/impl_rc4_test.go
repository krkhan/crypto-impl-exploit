package impl_rc4

import (
	"testing"
)

func TestRC4Encrypt(t *testing.T) {
	key := []byte("SECRET")
	rc4 := NewRC4(key)
	plaintext := []byte("Hello World")
	expectedCiphertext := []byte{0xd4, 0x0b, 0x00, 0x13, 0x60, 0x00, 0x74, 0xa7, 0x90, 0x0a, 0xd8}
	observedCiphertext := rc4.Encrypt(plaintext)

	if len(expectedCiphertext) != len(observedCiphertext) {
		t.Fatalf("ciphertext mismatch, expected length: %d, observed length: %d", len(expectedCiphertext), len(observedCiphertext))
	}
	for i := 0; i < len(expectedCiphertext); i++ {
		if expectedCiphertext[i] != observedCiphertext[i] {
			t.Fatalf("ciphertext mismatch, expected: %v, observed: %v", expectedCiphertext, observedCiphertext)
		}
	}

	key = []byte("TOPSECRET")
	rc4 = NewRC4(key)
	plaintext = []byte("Echoed in the wells of silence")
	expectedCiphertext = []byte{0x72, 0xc8, 0x70, 0x36, 0x81, 0x43, 0xbc, 0xf5, 0x6d, 0x9b, 0x4c,
		0xf6, 0xfe, 0x08, 0xc1, 0xf1, 0xd4, 0x6c, 0xc5, 0xb9, 0x77, 0x9b, 0x3d, 0x05, 0xb8, 0x8f,
		0x81, 0x13, 0xd3, 0x57}
	observedCiphertext = rc4.Encrypt(plaintext)

	if len(expectedCiphertext) != len(observedCiphertext) {
		t.Fatalf("ciphertext mismatch, expected length: %d, observed length: %d", len(expectedCiphertext), len(observedCiphertext))
	}
	for i := 0; i < len(expectedCiphertext); i++ {
		if expectedCiphertext[i] != observedCiphertext[i] {
			t.Fatalf("ciphertext mismatch, expected: %v, observed: %v", expectedCiphertext, observedCiphertext)
		}
	}
}
