package exploit_lcg

import (
	"github.com/krkhan/crypto-impl-exploit/ch02/lcg/go/impl_lcg"

	"testing"
	"time"
)

func TestCloneLCG(t *testing.T) {
	multiplier := 48271
	increment := 0
	modulus := 1<<31 - 1
	seed := time.Now().UnixNano()

	originalRng := impl_lcg.NewLCG(multiplier, increment, modulus, int(seed))
	clonedRng := CloneLCG(originalRng)

	for i := 0; i < 100; i++ {
		clonedValue := clonedRng.Generate()
		observedValue := originalRng.Generate()
		if observedValue != clonedValue {
			t.Fatalf("observed: %08x, cloned: %08x", clonedValue, observedValue)
		}
		if i%20 == 0 {
			t.Logf("observed: %08x, cloned: %08x", clonedValue, observedValue)
		}
	}
}
