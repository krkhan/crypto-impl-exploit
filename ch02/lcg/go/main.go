package main

import (
	"fmt"
)

type LCG struct {
	multiplier   int
	increment    int
	modulus      int
	currentValue int
}

func NewLCG(multiplier, increment, modulus, seed int) *LCG {
	lcg := &LCG{
		multiplier:   multiplier,
		increment:    increment,
		modulus:      modulus,
		currentValue: seed,
	}
	_ = lcg.Next()
	return lcg
}

func (lcg *LCG) Next() int {
	oldValue := lcg.currentValue
	lcg.currentValue = (lcg.multiplier*oldValue + lcg.increment) % lcg.modulus
	return oldValue
}

func main() {
	multiplier := 48271
	increment := 0
	modulus := 1<<31 - 1
	seed := 42
	lcg := NewLCG(multiplier, increment, int(modulus), int(seed))

	for i := 0; i < 10; i++ {
		fmt.Printf("%d, ", lcg.Next())
	}
	fmt.Printf("%d\n", lcg.Next())
}
