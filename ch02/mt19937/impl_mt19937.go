package mt19937

import (
	"time"
)

const (
	W uint32 = 32
	N uint32 = 624
	M uint32 = 397
	R uint32 = 31

	A uint32 = 0x9908B0DF
	F uint32 = 1812433253

	U uint32 = 11
	D uint32 = 0xFFFFFFFF

	S uint32 = 7
	B uint32 = 0x9D2C5680

	T uint32 = 15
	C uint32 = 0xEFC60000

	L uint32 = 18

	LowerMask uint32 = 0x7FFFFFFF
	UpperMask uint32 = 0x80000000
)

type MT19937 struct {
	seeded bool
	index  uint32
	state  [N]uint32
}

func NewMT19937() *MT19937 {
	return &MT19937{
		index: 0,
		state: [N]uint32{},
	}
}

func (mt *MT19937) Seed(seed uint32) {
	mt.index = 0
	mt.state[0] = seed

	for i := uint32(1); i < N; i++ {
		mt.state[i] = (F*(mt.state[i-1]^(mt.state[i-1]>>(W-2))) + i)
	}

	mt.seeded = true
}

func (mt *MT19937) Generate() uint32 {
	if mt.index == 0 {
		if !mt.seeded {
			mt.Seed(uint32(time.Now().Unix()))
		}
		mt.twist()
	}

	y := temper(mt.state[mt.index])

	mt.index = (mt.index + 1) % N

	return y
}

func (mt *MT19937) twist() {
	for i := uint32(0); i < N; i++ {
		x := (mt.state[i] & UpperMask) + (mt.state[(i+1)%N] & LowerMask)
		xA := x >> 1
		if x%2 == 1 {
			xA ^= A
		}
		mt.state[i] = mt.state[(i+M)%N] ^ xA
	}

	mt.index = 0
}

func temper(y uint32) uint32 {
	y ^= (y >> U) & D
	y ^= (y << S) & B
	y ^= (y << T) & C
	y ^= (y >> L)
	return y
}
