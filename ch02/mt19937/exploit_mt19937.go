package mt19937

func invertShiftMaskXorRight(y, shift uint32) uint32 {
	var mask uint32 = ((1 << shift) - 1) << (32 - shift)

	n := (32 + shift - 1) / shift
	for i := uint32(0); i < n; i++ {
		y ^= (y >> shift) & mask
		mask >>= shift
	}

	return y
}

func invertShiftMaskXorLeft(y, shift, number uint32) uint32 {
	var mask uint32 = (1 << shift) - 1

	n := (32 + shift - 1) / shift

	for i := uint32(0); i < n; i++ {
		y ^= (y << shift) & mask & number
		mask <<= shift
	}

	return y
}

func untemper(y uint32) uint32 {
	y = invertShiftMaskXorRight(y, L)
	y = invertShiftMaskXorLeft(y, T, C)
	y = invertShiftMaskXorLeft(y, S, B)
	y = invertShiftMaskXorRight(y, U)

	return y
}

func CloneMT19937(mt *MT19937) *MT19937 {
	cloned_mt := NewMT19937()

	for i := uint32(0); i < N; i++ {
		cloned_mt.state[i] = untemper(mt.Generate())
	}

	cloned_mt.index = mt.index
	cloned_mt.seeded = true

	return cloned_mt
}

